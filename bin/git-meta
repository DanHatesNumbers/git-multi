#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'git/meta'

module Git::Meta

  def git_option name, default = nil
    value = `git config --global #{name}`.chomp.freeze
    value.empty? && default ? default : value
  end

  def env_var name, default = nil
    value = ENV[name].dup.to_s.freeze
    value.empty? && default ? default : value
  end

  module_function :git_option, :env_var

  HOME          = env_var 'HOME', Etc.getpwuid.dir

  USER          = git_option 'github.user'
  TOKEN         = git_option 'gitmeta.token'
  ORGANIZATION  = git_option 'gitmeta.organization'
  WORKAREA      = git_option 'gitmeta.workarea'

  YAML_CACHE = File.join(HOME, '.gitmeta.yaml')
  JSON_CACHE = File.join(HOME, '.gitmeta.json')

end

case (command = ARGV.shift)
when /\A--/
  case command
    when '--help'    then Git::Meta::Commands.help
    when '--info'    then Git::Meta::Commands.info
    when '--check'   then Git::Meta::Commands.check
    when '--version' then Git::Meta::Commands.version
    when '--refresh' then Git::Meta::Commands.refresh
    when '--list'    then Git::Meta::Commands.list
    when '--stale'   then Git::Meta::Commands.stale
    when '--graph'   then Git::Meta::Commands.graph
    when '--count'   then Git::Meta::Commands.count
    when '--missing' then Git::Meta::Commands.missing
    when '--report'  then Git::Meta::Commands.report
    when '--excess'  then Git::Meta::Commands.excess
    when '--clone'   then Git::Meta::Commands.clone
    when '--query'   then Git::Meta::Commands.query(ARGV)
    when '--eval'    then Git::Meta::Commands.eval(*ARGV)
    when '--raw'     then Git::Meta::Commands.raw(ARGV)
  else
    abort "Unknown 'git-meta' sub-command: #{command}\n"\
          "(use --help/-h to list all available commands)"
  end
when *[nil, '', '-h']
  Git::Meta::Commands.help
else
  Git::Meta::Commands.report
  Git::Meta::Commands.exec command, ARGV
end

# That's all, Folks
